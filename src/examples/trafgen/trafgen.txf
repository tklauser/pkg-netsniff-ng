# each '{...}' defines a packet

# Classic style, byte-wise
{ 0x00, 0x01, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff }

# Usage of fill macro, fills 60 bytes with 0xff
{ 0x00, 0x01, 0x03, fill(0xff, 60) /* fill 60 bytes with ff */, 0x04 }

# Usage of rnd macro, fills 60 bytes with rnd values during compile time
{ 0x00, 0x01, 0x03, rnd(60), 0x04 }

# Usage of bitvectors (width: 8)
{ 0x00, 0b00110011, 0b10101010, rnd(60), 0x04 }

# Usage of seqinc macro, generates a sequence of 64 incr. bytes starting 0x00
{ seqinc(0x00, 64) }

# Usage of seqdec macro, generates a sequence of 64 2-decr. bytes starting 0xff
{ seqdec(0xff, 64, 2) }

# Mixture between hex and decimal and ascii
{ 0x00, 1, 2, 0x4, fill(123, 60), f, o, o, b, a, r }

# Mixture between comma and space as delimiter (not in macros allowed)
{ 0x00, 0x01, 0x03 fill(0xff, 60) 0x04 }

# Usage of ddec macro, decrements a byte _during_ runtime
{ ddec(255, 0), 0x01, 0x03, fill(0xff, 60) }

# Usage of dinc macro, increments a byte _during_ runtime with stepping of 2
{ dinc(0, 255, 2), 0x01, 0x03, fill(0xff, 60) }

# Usage of drnd macro, generates one random byte _during_ runtime
{ rnd(64) drnd() }

# Usage of drnd macro, generates 64 random bytes _during_ runtime
{ drnd(64) }

# Usage of ethernet header macro
#{ ether(src[ff:ff:ff:ff:ff:ff], dst[ff:ff:ff:ff:ff:ff], type[0x800]), rnd(50)}

# Mixture of several types
#{
#  ether(src[ff:ff:ff:ff:ff:ff], dst[ff:ff:ff:ff:ff:ff], type[0x800])
#  rnd(50) 0xff 0xaa s c h n u b b e l fill(0xaa, 10)
#}

# Usage of ethernet header macro, incomplete (unspecified fields will be random!)
#{ ether(dst[ff:ff:ff:ff:ff:ff], type[0x800]), rnd(50)}

# Usage of several macros
#{ ether(dst[ff:ff:ff:ff:ff:ff], type[0x800]) ipv4(dst[255.255.255.255]) }
